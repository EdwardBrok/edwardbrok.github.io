import requests
from bs4 import BeautifulSoup
import json
import os
import time
import hashlib
import telebot
from telebot import types
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
CONFIG = {
    "website_url": "http://127.0.0.1:5500/hac2025/index.html",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
    "data_file": "articles_data.json",
    "telegram_token": "7899269680:AAGdNnCIE3TbtStQjT8JfLL8lkJDrsGUDJQ",    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    "channel_id": "-1002372419341",                   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    "check_interval": 300,                       # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç)
    "admin_ids": [2109893818]                     # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(CONFIG['telegram_token'])

def generate_article_id(article_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
    unique_string = f"{article_data.get('title', '')}_{article_data.get('date', '')}"
    return hashlib.md5(unique_string.encode()).hexdigest()

def load_articles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(CONFIG['data_file']):
        try:
            with open(CONFIG['data_file'], 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                for article in data:
                    if 'id' not in article:
                        article['id'] = generate_article_id(article)
                return data
        except (json.JSONDecodeError, FileNotFoundError):
            return []
    return []

def save_articles(articles):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ —Ñ–∞–π–ª"""
    with open(CONFIG['data_file'], 'w', encoding='utf-8') as f:
        json.dump(articles, f, ensure_ascii=False, indent=4)

def parse_articles():
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—å–∏ —Å —Å–∞–π—Ç–∞"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(CONFIG['website_url'], headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        articles_section = soup.find('section', id='articles')
        
        if not articles_section:
            print("[–ü–∞—Ä—Å–µ—Ä] –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML")
            return []
            
        articles = []
        
        for article in articles_section.find_all('article', class_='article'):
            try:
                title_elem = article.find('h3', class_='name_news')
                date_elem = article.find('p', class_='date')
                text_elem = article.find('p', class_='news_text')
                link_elem = article.find('a')
                
                if not all([title_elem, date_elem, text_elem]):
                    print("[–ü–∞—Ä—Å–µ—Ä] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—å–∏")
                    continue
                
                title = title_elem.get_text(strip=True)
                date_str = date_elem.get_text(strip=True).replace('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:', '').strip()
                text = text_elem.get_text(' ', strip=True)
                link = link_elem['href'] if link_elem and 'href' in link_elem.attrs else "#"
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                if link.startswith('/'):
                    base_url = CONFIG['website_url'].rsplit('/', 1)[0]
                    link = f"{base_url}{link}"
                elif not link.startswith(('http://', 'https://')):
                    link = f"{CONFIG['website_url']}/{link}"
                
                article_data = {
                    'title': title,
                    'date': date_str,
                    'text': text,
                    'link': link,
                    'id': generate_article_id({'title': title, 'date': date_str}),
                    'posted_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                articles.append(article_data)
                
            except Exception as e:
                print(f"[–ü–∞—Ä—Å–µ—Ä] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}")
                continue
        
        print(f"[–ü–∞—Ä—Å–µ—Ä] –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        return articles
    
    except Exception as e:
        print(f"[–ü–∞—Ä—Å–µ—Ä] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return []

def check_new_articles():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏"""
    try:
        saved_articles = load_articles()
        parsed_articles = parse_articles()
        
        saved_ids = {article['id'] for article in saved_articles}
        new_articles = []
        
        for article in parsed_articles:
            if article['id'] not in saved_ids:
                new_articles.append(article)
        
        if new_articles:
            print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ù–∞–π–¥–µ–Ω–æ {len(new_articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
            for article in new_articles:
                if send_article_to_channel(article):
                    article['posted'] = True
                else:
                    article['posted'] = False
            
            updated_articles = saved_articles + new_articles
            save_articles(updated_articles)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            notify_admins(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
            
            return len(new_articles)
        
        print("[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0
    
    except Exception as e:
        print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞] –û—à–∏–±–∫–∞: {str(e)}")
        return 0

def send_article_to_channel(article):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é –≤ –∫–∞–Ω–∞–ª"""
    try:
        message = (
            f"<b>{article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
            f"<i>üìÖ {article.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}</i>\n\n"
            f"{article.get('text', '')}\n\n"
            f"<a href='{article.get('link', '#')}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ ‚Üí</a>"
        )
        
        sent_message = bot.send_message(
            chat_id=CONFIG['channel_id'],
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=False
        )
        
        print(f"[–û—Ç–ø—Ä–∞–≤–∫–∞] –°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {article.get('title', '')}")
        return True
    
    except Exception as e:
        print(f"[–û—Ç–ø—Ä–∞–≤–∫–∞] –û—à–∏–±–∫–∞: {str(e)}")
        return False

def notify_admins(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in CONFIG['admin_ids']:
        try:
            bot.send_message(admin_id, message)
        except Exception as e:
            print(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ admin {admin_id}: {str(e)}")

def start_periodic_checking():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    print("[–°–∏—Å—Ç–µ–º–∞] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    while True:
        try:
            print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            new_count = check_new_articles()
            print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞] –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CONFIG['check_interval']} —Å–µ–∫.")
            time.sleep(CONFIG['check_interval'])
        except Exception as e:
            print(f"[–°–∏—Å—Ç–µ–º–∞] –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
            time.sleep(60)

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    help_text = (
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å —Å–∞–π—Ç–∞ –≤ –∫–∞–Ω–∞–ª.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/check - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π\n"
        "/last - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞—Ç–µ–π\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "/force_check - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )
    bot.reply_to(message, help_text, parse_mode='HTML')

@bot.message_handler(commands=['check'])
def manual_check(message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–µ–π"""
    bot.reply_to(message, "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π...")
    new_count = check_new_articles()
    bot.reply_to(message, f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")

@bot.message_handler(commands=['last'])
def show_last_articles(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"""
    articles = load_articles()
    last_articles = articles[-5:] if len(articles) > 5 else articles
    
    if not last_articles:
        bot.reply_to(message, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return
    
    response = "üìö <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:</b>\n\n"
    for idx, article in enumerate(reversed(last_articles), 1):
        response += (
            f"{idx}. <b>{article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            f"   <i>üìÖ {article.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}</i>\n"
            f"   {article.get('text', '')[:100]}...\n\n"
        )
    
    bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['status'])
def show_status(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    articles = load_articles()
    last_check = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    status = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: <b>{len(articles)}</b>\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <b>{last_check}</b>\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{CONFIG['check_interval']} —Å–µ–∫.</b>\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{CONFIG['channel_id']}</b>\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: <b>1.0</b>"
    )
    bot.reply_to(message, status, parse_mode='HTML')

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    articles = load_articles()
    if not articles:
        bot.reply_to(message, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    last_article = articles[-1]
    stats = (
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: <b>{len(articles)}</b>\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è: <b>{last_article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"‚Ä¢ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{last_article.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: <b>{last_article.get('posted_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>"
    )
    bot.reply_to(message, stats, parse_mode='HTML')

@bot.message_handler(commands=['force_check'])
def force_check(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in CONFIG['admin_ids']:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    bot.reply_to(message, "‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    new_count = check_new_articles()
    bot.reply_to(message, f"üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(CONFIG['data_file']):
        save_articles([])
        print("[–°–∏—Å—Ç–µ–º–∞] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        import threading
        check_thread = threading.Thread(target=start_periodic_checking)
        check_thread.daemon = True
        check_thread.start()
        print("[–°–∏—Å—Ç–µ–º–∞] –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"[–°–∏—Å—Ç–µ–º–∞] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {str(e)}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("[–°–∏—Å—Ç–µ–º–∞] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        notify_admins("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"[–°–∏—Å—Ç–µ–º–∞] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        notify_admins(f"‚ÄºÔ∏è –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")